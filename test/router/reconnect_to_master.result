test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'router')
---
...
test_run:create_cluster(REPLICASET_2, 'router')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
--
-- gh-51: discovery must work with replicas.
-- Create 10 buckets and replicate them. Then start router and
-- down master. Router discovery fiber must use replica to find
-- buckets.
--
_ = test_run:switch('storage_1_a')
---
...
_bucket = box.space._bucket
---
...
for i = 1, 10 do _bucket:replace{i, vshard.consts.BUCKET.ACTIVE} end
---
...
_ = test_run:switch('storage_1_b')
---
...
_bucket = box.space._bucket
---
...
while _bucket:count() ~= 10 do fiber.sleep(0.1) end
---
...
-- Break a connection to a master.
_ = test_run:cmd('stop server storage_1_a')
---
...
_ = test_run:cmd("create server router_1 with script='router/router_1.lua'")
---
...
_ = test_run:cmd("start server router_1 with args='discovery_disable'")
---
...
_ = test_run:switch('router_1')
---
...
util = require('util')
---
...
reps = vshard.router.static.replicasets
---
...
_ = test_run:cmd("setopt delimiter ';'")
---
...
function is_disconnected()
    for i, rep in pairs(reps) do
        if rep.master.conn == nil or rep.master.conn.state ~= 'active' then
            return true
        end
    end
    return false
end;
---
...
function count_known_buckets()
    local known_buckets = 0
    for _, id in pairs(vshard.router.static.route_map) do
        known_buckets = known_buckets + 1
    end
    return known_buckets
end;
---
...
_ = test_run:cmd("setopt delimiter ''");
---
...
count_known_buckets()
---
- 0
...
vshard.router.discovery_set('on')
---
...
fiber = require('fiber')
---
...
-- Use replica to find buckets.
while count_known_buckets() ~= 10 do vshard.router.discovery_wakeup() fiber.sleep(0.1) end
---
...
-- No master in replica set 1.
is_disconnected()
---
- true
...
-- Wait until replica is connected to test alerts on unavailable
-- master.
while vshard.router.static.replicasets[util.replicasets[1]].replica == nil do fiber.sleep(0.1) end
---
...
vshard.router.info()
---
- replicasets:
    ac522f65-aa94-4134-9f64-51ee384f1a54:
      replica: &0
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3303
        uuid: 1e02ae8a-afc0-4e91-ba34-843a356b8ed7
      bucket:
        available_rw: 0
      uuid: ac522f65-aa94-4134-9f64-51ee384f1a54
      master: *0
    cbf06940-0790-498b-948d-042b62cf3d29:
      replica:
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3302
        uuid: 3de2e3e1-9ebe-4d0d-abb1-26d301b84633
      bucket:
        available_ro: 10
      uuid: cbf06940-0790-498b-948d-042b62cf3d29
      master:
        network_timeout: 0.5
        status: unreachable
        uri: storage@127.0.0.1:3301
        uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
  bucket:
    unreachable: 0
    available_ro: 10
    unknown: 2990
    available_rw: 0
  status: 2
  alerts:
  - ['UNREACHABLE_MASTER', 'Master of replicaset cbf06940-0790-498b-948d-042b62cf3d29
      is unreachable: disconnected']
  - ['SUBOPTIMAL_REPLICA', 'A current read replica in replicaset cbf06940-0790-498b-948d-042b62cf3d29
      is not optimal']
  - ['UNKNOWN_BUCKETS', '2990 buckets are not discovered']
...
-- Return master.
_ = test_run:cmd('start server storage_1_a')
---
...
max_iters = 1000
---
...
i = 0
---
...
while is_disconnected() and i < max_iters do i = i + 1 fiber.sleep(0.1) end
---
...
-- Master connection is active again.
is_disconnected()
---
- false
...
--
-- gh-245: dynamic uri reconfiguration didn't work - even if URI was changed in
-- the config for any instance, it used old connection, because reconfiguration
-- compared connections by UUID instead of URI.
--
util = require('util')
---
...
-- Firstly, clean router from storage_1_a connection.
rs1_uuid = util.replicasets[1]
---
...
rs1_cfg = cfg.sharding[rs1_uuid]
---
...
cfg.sharding[rs1_uuid] = nil
---
...
vshard.router.cfg(cfg)
---
...
-- Now break the URI in the config.
old_uri = rs1_cfg.replicas[util.name_to_uuid.storage_1_a].uri
---
...
rs1_cfg.replicas[util.name_to_uuid.storage_1_a].uri = 'https://bad_uri.com:123'
---
...
-- Apply the bad config.
cfg.sharding[rs1_uuid] = rs1_cfg
---
...
vshard.router.cfg(cfg)
---
...
-- Should fail - master is not available because of the bad URI.
res, err = vshard.router.callrw(1, 'echo', {1})
---
...
res == nil and err ~= nil
---
- true
...
-- Repair the config.
rs1_cfg.replicas[util.name_to_uuid.storage_1_a].uri = old_uri
---
...
vshard.router.cfg(cfg)
---
...
-- Should drop the old connection object and connect fine.
vshard.router.callrw(1, 'echo', {1})
---
- 1
...
_ = test_run:switch("default")
---
...
_ = test_run:cmd('stop server router_1')
---
...
_ = test_run:cmd('cleanup server router_1')
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
